#!/usr/bin/python
import argparse
import os
import sys
import logging
import pprint
import base64
import time

import boto.regioninfo
import boto.kinesis.layer1
import msgpack

from triton import stream

log = logging.getLogger('triton')


GET_COMMAND = 'get'
PUT_COMMAND = 'put'


def setup_logging(options):
    if len(options.verbose) > 1:
        level = logging.DEBUG
    elif options.verbose:
        level = logging.INFO
    else:
        level = logging.WARNING

    log_format = "%(asctime)s %(levelname)s:%(name)s: %(message)s"

    # We just log straight to stdout. Generally oxd is run by some process that
    # handles collecting logging for you, like upstart or supervisord. It would be
    # easy enough to add an option if it was needed by someone though.
    logging.basicConfig(level=level, format=log_format, stream=sys.stdout)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v',
                    dest='verbose',
                    action='append_const',
                    const=True,
                    default=list())

    subparsers = parser.add_subparsers(
            dest='command',
            help='available commands')

    parser_put = subparsers.add_parser(
            PUT_COMMAND,
            help='read lines from stdin, put to stream')

    parser_put.add_argument('--stream', '-s', dest='stream', action='store', required=True)

    parser_get = subparsers.add_parser(
            GET_COMMAND,
            help='read records from stream')

    parser_get.add_argument('--stream', '-s', dest='stream', action='store', required=True)
    parser_get.add_argument('--shard', '-d', dest='stream', nargs='+')

    args = parser.parse_args()

    setup_logging(args)

    region = os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')

    if args.command == GET_COMMAND:
        cmd_stream = stream.get_stream(args.stream, region)

        running = True
        i = cmd_stream.build_iterator_from_latest()
        while True:
            try:
                for rec in i:
                    print rec
                    pprint.pprint(rec.data)
                    print
            except KeyboardInterrupt:
                i.stop()
                continue
            else:
                break

    elif args.command == PUT_COMMAND:
        cmd_stream = stream.get_stream(args.stream, region)

        for line in sys.stdin:
            cmd_stream.put(msg=line, ts=time.time())


if __name__ == '__main__':
    main()
